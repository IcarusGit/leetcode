{
  "name": "moment",
  "version": "1.0.0",
  "description": "",
  "main": "try.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon try.js",
    "palindrome": "nodemon integerIsPalindrome.js",
    "twoSum": "nodemon addTwoNumbersFromArray.js",
    "prefix": "nodemon commonPrefix.js",
    "indexFirst": "nodemon indexFirstOccurence.js",
    "removeDuplicate": "nodemon removeDuplicatedFromSortedArray.js",
    "groupAnagrams": "nodemon groupAnagrams.js",
    "recursionFactorial": "nodemon recursionFactorial.js",
    "addTwoReversedArray": "nodemon addTwoReversedArray.js",
    "romanToInteger": "nodemon romanToInteger.js",
    "validParentheses": "nodemon validParentheses.js",
    "removeElement": "nodemon removeElement.js",
    "integerToRoman": "nodemon integerToRoman.js",
    "reverseInteger": "nodemon reverseInteger.js",
    "mostWater": "nodemon containerWithMostWater.js",
    "mergeSortedArray": "nodemon mergeSortedArray.js",
    "searchInsertPosition": "nodemon searchInsertPosition.js",
    "pow": "nodemon pow(x,n).js",
    "prac": "nodemon prac.js",
    "lenLastWord": "nodemon lengthOfLastWord.js",
    "plusOne": "nodemon plusOne.js",
    "addBinary": "nodemon addBinary.js",
    "sqrt": "nodemon sqrt(x).js",
    "moveZeroes": "nodemon moveZeroes.js",
    "arrWithStackOper": "nodemon arrayWithStackOperation.js",
    "isPalindrome": "nodemon validPalindromePhrase.js",
    "buyStock": "nodemon bestTimeToBuyStock.js",
    "truncate": "nodemon divideTwoIntegers.js",
    "missingNumber": "nodemon missingNumber.js",
    "firstAndLast": "nodemon firstAndLastOccurence.js",
    "letterCombination": "nodemon letterCombinationPhoneNum.js",
    "xor": "nodemon singleNumberXor.js",
    "reverseWord": "nodemon reverseWordInPhrase.js",
    "wordPattern": "nodemon wordPattern.js",
    "majorityElement": "nodemon majorityElement.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "moment": "^2.29.4",
    "nodemon": "^3.0.1"
  }
}
